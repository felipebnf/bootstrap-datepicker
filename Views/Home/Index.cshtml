@model TesteViewModel
<div class="row">
    <div class="col-6 offset-3">
        <form>
            @if (Model.Datas?.Count > 0)
            {
                @foreach (var item in Model.Datas)
                {
                    <input type="hidden" name="data[]" value="@item" />
                }
            }
            <div class="row form-group">
                <label for="date" class="col-sm-2 col-form-label">Date</label>
                <div class="col-sm-10">
                    <div class="input-group date">
                        <input type="text" class="form-control datepicker" value="@(Model.Data)">
                        <span class="input-group-append">
                            <span class="input-group-text bg-white">
                                <i class="fa fa-calendar"></i>
                            </span>
                        </span>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<script type="text/javascript">
    $(function () {

        // Extraindo datas da List vindo da Model
        let datasAgendadas = []
        $('input[name="data[]"]').each((i, e) => { datasAgendadas.push($(e).val().split(" ")[0]) })
        console.log('datasAgendadas', datasAgendadas)

        // Caso queria desabilitar Datas exceto as agendadas
        let datasDesabilitadas = desabilitarDatas(datasAgendadas)

        function estilizarDatas(data) {
            if (datasAgendadas.includes(data.toLocaleString().split(",")[0])) {
                console.log('Data agendada estilizada', data.toLocaleString())
                return {
                    enabled: true, // Habilita ou não a célula da data
                    classes: 'celula', // classe CSS que estiliza a célula da data [wwwwroot\css\site.css]
                    tooltip: 'Agendada' // Texto ao passar o mouse por cima da célula da data
                }
            }
        }

        function desabilitarDatas(lista) {
            let datasDesabilitadas = [];
            let primeiroDia = new Date(new Date().getUTCFullYear(), new Date().getUTCMonth(), 1, 0, 0, 0, 0);
            while (primeiroDia.getUTCMonth() === new Date().getUTCMonth()) {
                if (!datasAgendadas.includes(primeiroDia.toLocaleDateString())) {
                    datasDesabilitadas.push(primeiroDia.toLocaleDateString().split(" ")[0]);
                }
                primeiroDia.setUTCDate(primeiroDia.getUTCDate() + 1);
            }
            console.log('datasDesabilitadas', datasDesabilitadas);
            return datasDesabilitadas;
        }

        $('.datepicker').datepicker({
            format: 'dd/mm/yyyy',
            beforeShowDay: estilizarDatas,
            //datesDisabled: datasDesabilitadas 
        });

        // Customiza a data selecionada (.active para o datepicker)
        $('.datepicker').change((e) => {
            $('div.datepicker-days > table > tbody > td').removeClass('celulaSelecionada')
            $('div.datepicker-days > table > tbody > td.active').addClass('celulaSelecionada')
        });
    });
</script>